// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace TailorAPI.Migrations
{
    [DbContext(typeof(TailorDbContext))]
    partial class TailorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Measurement", b =>
                {
                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<float>("Arms")
                        .HasColumnType("real");

                    b.Property<float>("Chest")
                        .HasColumnType("real");

                    b.Property<float>("Hip")
                        .HasColumnType("real");

                    b.Property<float>("Inseam")
                        .HasColumnType("real");

                    b.Property<float>("Neck")
                        .HasColumnType("real");

                    b.Property<float>("Shoulder")
                        .HasColumnType("real");

                    b.Property<float>("Sleeve")
                        .HasColumnType("real");

                    b.Property<float>("SleeveLength")
                        .HasColumnType("real");

                    b.Property<float>("Thigh")
                        .HasColumnType("real");

                    b.Property<float>("TrouserLength")
                        .HasColumnType("real");

                    b.Property<float>("Waist")
                        .HasColumnType("real");

                    b.HasKey("CustomerID");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("Measurement", b =>
                {
                    b.HasOne("Customer", "Customer")
                        .WithOne("Measurement")
                        .HasForeignKey("Measurement", "CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.Navigation("Measurement")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
